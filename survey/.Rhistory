# prep
theta = summary(model)$coefficients[2,1]
prop_model = glm(formula = a ~ c, family=("binomial"), data=data)
data$prop = predict(prop_model, data, type='response')
data$prop_opp = 1 - data$prop
data$inv_prop = 1 / data$prop
data$inv_prop_opp = 1 / data$prop_opp
iters = 200
#iters = 2
sum_u = 0
sum_r = 0
sum_ipwt = 0
square_sum_u = 0
square_sum_r = 0
square_sum_ipwt = 0
for(i in 1 : iters){
temp_data = filter(data, sim_id==i)
temp_control = filter(temp_data, a==0)
temp_treat = filter(temp_data, a==1)
theta_u = mean(temp_treat$y) - mean(temp_control$y)
temp_model = lm(formula = y ~ a + c, data=temp_data)
# extract coefficient values: https://stackoverflow.com/questions/6577058/extract-regression-coefficient-values
theta_r = summary(temp_model)$coefficients[2,1]
temp_control$lambda <- temp_control$inv_prop_opp
temp_treat$lambda <- temp_treat$inv_prop
theta_ipwt = (sum(temp_treat$y * temp_treat$lambda) - sum(temp_control$y * temp_control$lambda)) / nrow(temp_data)
sum_u = sum_u + (theta_u - theta)
sum_r = sum_r + (theta_r - theta)
sum_ipwt = sum_ipwt + (theta_ipwt - theta)
square_sum_u = square_sum_u + (theta_u - theta)**2
square_sum_r = square_sum_r + (theta_r - theta)**2
square_sum_ipwt = square_sum_ipwt + (theta_ipwt - theta)**2
}
# technically the average now
sum_u = sum_u / 200
sum_r = sum_r / 200
sum_ipwt = sum_ipwt / 200
# technically the rmse now
square_sum_u = sqrt(square_sum_u / 200)
square_sum_r = sqrt(square_sum_r / 200)
square_sum_ipwt = sqrt(square_sum_ipwt / 200)
sum_u
sum_r
sum_ipwt
square_sum_u
square_sum_r
square_sum_ipwt
# LOAD R ENV
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_2")
data <- read.table("./HOLDDATA1.DAT")
# rename columns: https://www.geeksforgeeks.org/change-column-name-of-a-given-dataframe-in-r/
colnames(data) = c('sim_id', 'a', 'c', 'y')
data
model = lm(formula = y ~ a + c, data=data)
summary(model)
# prep
theta = summary(model)$coefficients[2,1]
prop_model = glm(formula = a ~ c, family=("binomial"), data=data)
data$prop = predict(prop_model, data, type='response')
data$prop_opp = 1 - data$prop
data$inv_prop = 1 / data$prop
data$inv_prop_opp = 1 / data$prop_opp
iters = 200
#iters = 2
sum_u = 0
sum_r = 0
sum_ipwt = 0
square_sum_u = 0
square_sum_r = 0
square_sum_ipwt = 0
for(i in 1 : iters){
temp_data = filter(data, sim_id==i)
temp_control = filter(temp_data, a==0)
temp_treat = filter(temp_data, a==1)
theta_u = mean(temp_treat$y) - mean(temp_control$y)
temp_model = lm(formula = y ~ a + c, data=temp_data)
# extract coefficient values: https://stackoverflow.com/questions/6577058/extract-regression-coefficient-values
theta_r = summary(temp_model)$coefficients[2,1]
temp_control$lambda <- temp_control$inv_prop_opp
temp_treat$lambda <- temp_treat$inv_prop
theta_ipwt = (sum(temp_treat$y * temp_treat$lambda) - sum(temp_control$y * temp_control$lambda)) / nrow(temp_data)
sum_u = sum_u + (theta_u - theta)
sum_r = sum_r + (theta_r - theta)
sum_ipwt = sum_ipwt + (theta_ipwt - theta)
square_sum_u = square_sum_u + (theta_u - theta)**2
square_sum_r = square_sum_r + (theta_r - theta)**2
square_sum_ipwt = square_sum_ipwt + (theta_ipwt - theta)**2
}
# technically the average now
sum_u = sum_u / 200
sum_r = sum_r / 200
sum_ipwt = sum_ipwt / 200
# technically the rmse now
square_sum_u = sqrt(square_sum_u / 200)
square_sum_r = sqrt(square_sum_r / 200)
square_sum_ipwt = sqrt(square_sum_ipwt / 200)
sum_u
sum_r
sum_ipwt
square_sum_u
square_sum_r
square_sum_ipwt
# LOAD R ENV
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_2")
data <- read.table("./HOLDDATA2-3.DAT")
# rename columns: https://www.geeksforgeeks.org/change-column-name-of-a-given-dataframe-in-r/
colnames(data) = c('sim_id', 'a', 'c', 'y')
data
model = lm(formula = y ~ a + exp(c), data=data)
summary(model)
# prep
theta = summary(model)$coefficients[2,1]
prop_model = glm(formula = a ~ c, family=("binomial"), data=data)
data$prop = predict(prop_model, data, type='response')
data$prop_opp = 1 - data$prop
data$inv_prop = 1 / data$prop
data$inv_prop_opp = 1 / data$prop_opp
iters = 200
#iters = 2
sum_u = 0
sum_r = 0
sum_ipwt = 0
square_sum_u = 0
square_sum_r = 0
square_sum_ipwt = 0
for(i in 1 : iters){
#print(data)
temp_data = filter(data, sim_id==i)
temp_control = filter(temp_data, a==0)
temp_treat = filter(temp_data, a==1)
theta_u = mean(temp_treat$y) - mean(temp_control$y)
temp_model = lm(formula = y ~ a + c, data=temp_data)
# extract coefficient values: https://stackoverflow.com/questions/6577058/extract-regression-coefficient-values
theta_r = summary(temp_model)$coefficients[2,1]
temp_control$lambda <- temp_control$inv_prop_opp
temp_treat$lambda <- temp_treat$inv_prop
theta_ipwt = (sum(temp_treat$y * temp_treat$lambda) - sum(temp_control$y * temp_control$lambda)) / nrow(temp_data)
sum_u = sum_u + (theta_u - theta)
sum_r = sum_r + (theta_r - theta)
sum_ipwt = sum_ipwt + (theta_ipwt - theta)
square_sum_u = square_sum_u + (theta_u - theta)**2
square_sum_r = square_sum_r + (theta_r - theta)**2
square_sum_ipwt = square_sum_ipwt + (theta_ipwt - theta)**2
}
# technically the average now
sum_u = sum_u / 200
sum_r = sum_r / 200
sum_ipwt = sum_ipwt / 200
# technically the rmse now
square_sum_u = sqrt(square_sum_u / 200)
square_sum_r = sqrt(square_sum_r / 200)
square_sum_ipwt = sqrt(square_sum_ipwt / 200)
sum_u
sum_r
sum_ipwt
square_sum_u
square_sum_r
square_sum_ipwt
library(MCMCpack)
library(MCMCpack)
install.packages("MCMCpack")
library(MCMCpack)
library(invgamma)
install.packages("invgamma")
library(invgamma)
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
causal<-read.table("causal_new_phys.txt")
causal
outcome<-causal[,2]
n<-length(causal[,1])
Z<-1-causal[,5]
D<-causal[,6]
###Initialize values for MCMC###
pi<-c(.2,.3,.5)
lambda<-c(5,10,15,20)
sigsq=100
###Burn-in###
GIBBS<-100
for(gibbs in 1:GIBBS){
###Draw pi_c, pi_n, pi_l for each observation###
pci<-as.numeric(Z==D)*(Z==1)*(D==1)*
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))+pi[3]*dnorm(outcome,lambda[4],
sqrt(sigsq))))+
as.numeric(Z==D)*(Z==0)*(D==0)*
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))+pi[2]*dnorm(outcome,lambda[3],
sqrt(sigsq))))
pni<-as.numeric(D==0)*(Z==1)*(D==0)+
as.numeric(D==0)*(Z==0)*(D==0)*
(pi[2]*dnorm(outcome,lambda[3],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))+pi[2]*dnorm(outcome,lambda[3],
sqrt(sigsq))))
pli<-as.numeric(D==1)*(Z==0)*(D==1)+
as.numeric(D==1)*(Z==1)*(D==1)*
(pi[3]*dnorm(outcome,lambda[4],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))+pi[3]*dnorm(outcome,lambda[4],
sqrt(sigsq))))
###Draw compliance class for each observation###
pii<-cbind(pci,pni,pli)
C<-rep(0,n)
for(i in 1:n){
C[i]<-sum(rmultinom(1,1,prob=pii[i,])*c(1:3))
}
###Compute n for each compliance class and indicators of membership###
n11<-sum((C==1)*(Z==1))
n10<-sum((C==1)*(Z==0))
n2<-sum(C==2)
n3<-sum(C==3)
w11<-(C==1)*(Z==1)
w10<-(C==1)*(Z==0)
w2<-(C==2)
w3<-(C==3)
###Draw compliance class means###
#l11<-rnorm(1,weighted.mean(outcome,w=w11),sqrt(sigsq/n11))
#l10<-rnorm(1,weighted.mean(outcome,w=w10),sqrt(sigsq/n10))
#l2<-rnorm(1,weighted.mean(outcome,w=w2),sqrt(sigsq/n2))
#l3<-rnorm(1,weighted.mean(outcome,w=w3),sqrt(sigsq/n3))
if(sum(w11>0)) lambda[1]<-
rnorm(1,weighted.mean(outcome,w=w11),sqrt(sigsq/n11))
if(sum(w10>0)) lambda[2]<-
rnorm(1,weighted.mean(outcome,w=w10),sqrt(sigsq/n10))
if(sum(w2>0)) lambda[3]<-
rnorm(1,weighted.mean(outcome,w=w2),sqrt(sigsq/n2))
if(sum(w3>0)) lambda[4]<-
rnorm(1,weighted.mean(outcome,w=w3),sqrt(sigsq/n3))
###Compute sum of squares###
X<-cbind(w11,w10,w2,w3)
#yhat<-X%*%c(l11,l10,l2,l3)
yhat<-X%*%lambda
SS<-sum((outcome-yhat)^2)
###Draw sigma^2###
sigsq<-rinvgamma(1,shape=(n+.01),rate=(SS+.01))
###Draw pi###
pi<-rdirichlet(1,c((n11+n10)+1,n2+1,n3+1))
#print(gibbs)
}
library(MCMCpack)
library(invgamma)
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
causal<-read.table("causal_new_phys.txt")
causal
outcome<-causal[,2]
n<-length(causal[,1])
Z<-1-causal[,5]
D<-causal[,6]
###Initialize values for MCMC###
pi<-c(.2,.3,.5)
lambda<-c(5,10,15,20)
sigsq=100
###Burn-in###
GIBBS<-100
for(gibbs in 1:GIBBS){
###Draw pi_c, pi_n, pi_l for each observation###
pci<-as.numeric(Z==D)*(Z==1)*(D==1)*
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))+pi[3]*dnorm(outcome,lambda[4],
sqrt(sigsq))))+
as.numeric(Z==D)*(Z==0)*(D==0)*
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))+pi[2]*dnorm(outcome,lambda[3],
sqrt(sigsq))))
pni<-as.numeric(D==0)*(Z==1)*(D==0)+
as.numeric(D==0)*(Z==0)*(D==0)*
(pi[2]*dnorm(outcome,lambda[3],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))+pi[2]*dnorm(outcome,lambda[3],
sqrt(sigsq))))
pli<-as.numeric(D==1)*(Z==0)*(D==1)+
as.numeric(D==1)*(Z==1)*(D==1)*
(pi[3]*dnorm(outcome,lambda[4],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))+pi[3]*dnorm(outcome,lambda[4],
sqrt(sigsq))))
###Draw compliance class for each observation###
pii<-cbind(pci,pni,pli)
C<-rep(0,n)
for(i in 1:n){
C[i]<-sum(rmultinom(1,1,prob=pii[i,])*c(1:3))
}
###Compute n for each compliance class and indicators of membership###
n11<-sum((C==1)*(Z==1))
n10<-sum((C==1)*(Z==0))
n2<-sum(C==2)
n3<-sum(C==3)
w11<-(C==1)*(Z==1)
w10<-(C==1)*(Z==0)
w2<-(C==2)
w3<-(C==3)
###Draw compliance class means###
#l11<-rnorm(1,weighted.mean(outcome,w=w11),sqrt(sigsq/n11))
#l10<-rnorm(1,weighted.mean(outcome,w=w10),sqrt(sigsq/n10))
#l2<-rnorm(1,weighted.mean(outcome,w=w2),sqrt(sigsq/n2))
#l3<-rnorm(1,weighted.mean(outcome,w=w3),sqrt(sigsq/n3))
if(sum(w11>0)) lambda[1]<-
rnorm(1,weighted.mean(outcome,w=w11),sqrt(sigsq/n11))
if(sum(w10>0)) lambda[2]<-
rnorm(1,weighted.mean(outcome,w=w10),sqrt(sigsq/n10))
if(sum(w2>0)) lambda[3]<-
rnorm(1,weighted.mean(outcome,w=w2),sqrt(sigsq/n2))
if(sum(w3>0)) lambda[4]<-
rnorm(1,weighted.mean(outcome,w=w3),sqrt(sigsq/n3))
###Compute sum of squares###
X<-cbind(w11,w10,w2,w3)
#yhat<-X%*%c(l11,l10,l2,l3)
yhat<-X%*%lambda
SS<-sum((outcome-yhat)^2)
###Draw sigma^2###
sigsq<-rinvgamma(1,shape=(n+.01),rate=(SS+.01))
###Draw pi###
pi<-rdirichlet(1,c((n11+n10)+1,n2+1,n3+1))
#print(gibbs)
}
###Repeat once burn in is complete###
GIBBS<-10000
holdpi<-matrix(rep(0,GIBBS*3),GIBBS,3)
holdl<-matrix(rep(0,GIBBS*4),GIBBS,4)
holdsiqsq<-rep(0,GIBBS)
for(gibbs in 1:GIBBS){
pci<-as.numeric(Z==D)*(Z==1)*(D==1)*
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))+pi[3]*dnorm(outcome,lambda[4],
sqrt(sigsq))))+
as.numeric(Z==D)*(Z==0)*(D==0)*
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))+pi[2]*dnorm(outcome,lambda[3],
sqrt(sigsq))))
pni<-as.numeric(D==0)*(Z==1)*(D==0)+
as.numeric(D==0)*(Z==0)*(D==0)*
(pi[2]*dnorm(outcome,lambda[3],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[2],sqrt(sigsq))+pi[2]*dnorm(outcome,lambda[3],
sqrt(sigsq))))
pli<-as.numeric(D==1)*(Z==0)*(D==1)+
as.numeric(D==1)*(Z==1)*(D==1)*
(pi[3]*dnorm(outcome,lambda[4],sqrt(sigsq))/
(pi[1]*dnorm(outcome,lambda[1],sqrt(sigsq))+pi[3]*dnorm(outcome,lambda[4],
sqrt(sigsq))))
pii<-cbind(pci,pni,pli)
C<-rep(0,n)
for(i in 1:n){
C[i]<-sum(rmultinom(1,1,prob=pii[i,])*c(1:3))
}
n11<-sum((C==1)*(Z==1))
n10<-sum((C==1)*(Z==0))
n2<-sum(C==2)
n3<-sum(C==3)
w11<-(C==1)*(Z==1)
w10<-(C==1)*(Z==0)
w2<-(C==2)
w3<-(C==3)
#l11<-rnorm(1,weighted.mean(outcome,w=w11),sqrt(sigsq/n11))
#l10<-rnorm(1,weighted.mean(outcome,w=w10),sqrt(sigsq/n10))
#l2<-rnorm(1,weighted.mean(outcome,w=w2),sqrt(sigsq/n2))
#l3<-rnorm(1,weighted.mean(outcome,w=w3),sqrt(sigsq/n3))
if(sum(w11>0)) lambda[1]<-
rnorm(1,weighted.mean(outcome,w=w11),sqrt(sigsq/n11))
if(sum(w10>0)) lambda[2]<-
rnorm(1,weighted.mean(outcome,w=w10),sqrt(sigsq/n10))
if(sum(w2>0)) lambda[3]<-
rnorm(1,weighted.mean(outcome,w=w2),sqrt(sigsq/n2))
if(sum(w3>0)) lambda[4]<-
rnorm(1,weighted.mean(outcome,w=w3),sqrt(sigsq/n3))
X<-cbind(w11,w10,w2,w3)
#yhat<-X%*%c(l11,l10,l2,l3)
yhat<-X%*%lambda
SS<-sum((outcome-yhat)^2)
sigsq<-rinvgamma(1,shape=(n+.01),rate=(SS+.01))
pi<-rdirichlet(1,c((n11+n10)+1,n2+1,n3+1))
###Now save results###
holdpi[gibbs,]<-pi
holdl[gibbs,]<-lambda
holdsiqsq[gibbs]<-sigsq
#print(gibbs)
}
###Plots##
par(mfrow=c(1,3))
plot.ts(holdpi[,1],ylab="pi_c")
plot.ts(holdpi[,2],ylab="pi_n")
plot.ts(holdpi[,3],ylab="pi_l")
par(mfrow=c(2,2))
plot.ts(holdl[,1],ylab="lambda_c1")
plot.ts(holdl[,2],ylab="lambda_c0")
plot.ts(holdl[,3],ylab="lambda_n")
plot.ts(holdl[,4],ylab="lambda_l")
par(mfrow=c(1,1))
plot.ts(holdsiqsq)
###Posterior means and 95% CIs###
for(j in 1:3){
print(c(sort(holdpi[,j])[.025*GIBBS],mean(holdpi[,j]),sort(holdpi[,j])[.97
5*GIBBS]))
ittc<-holdl[,1]-holdl[,2]
hist(ittc)
c(sort(ittc)[.025*GIBBS],mean(ittc),sort(ittc)[.975*GIBBS])
data
library(MCMCpack)
library(MCMCpack)
library(invgamma)
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./va.dat")
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./va.dat")
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
library(MCMCpack)
library(invgamma)
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./va.dat")
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./va.dat")
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./va.dat")
data
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./asciiqob.txt")
data
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./asciiqob.txt")
data
colnames(data) = c('log_inc', 'edu', 'yob', 'qob', 'state)
colnames(data) = c('log_inc', 'edu', 'yob', 'qob', 'state')
# in ~ edu
model = lm(formula = log_inc ~ edu, data=data)
summary(model)
library(ivmodel)
install.packages("ivmodel")
library(ivmodel)
# Z is the instrumental variable
ivmodel(Y=data$log_inc,D=edu,Z=data$qob,X=NULL)
# Z is the instrumental variable
ivmodel(Y=data$log_inc,D=data$edu,Z=data$qob,X=NULL)
# Z is the instrumental variable
ivmodel(Y=data$log_inc,D=data$edu,Z=data$qob)
ivmodel(Y=data$log_inc,D=data$edu,Z=data$c(qob,yob))
ivmodel(Y=data$log_inc,D=data$edu,Z=data$c("qob","yob"))
data$c("qob","yob")
data[,c("qob","yob")]
ivmodel(Y=data$log_inc,D=data$edu,Z=data[,c("qob","yob")])
confint(model)
summary(model)
# Z is the instrumental variable
iv_1 = ivmodel(Y=data$log_inc,D=data$edu,Z=data$qob)
confint(iv_1)
confint(model)
summary(model)
# To actually figure out the confidence interval: https://www.econometrics-with-r.org/5-2-cifrc.html
confint(model)
iv_2 = ivmodel(Y=data$log_inc,D=data$edu,Z=data[,c("qob","yob")])
confint(iv_2)
iv_2 = ivmodel(Y=data$log_inc,D=data$edu,Z=data[,c("qob","yob")])
summary(iv_2)
summary(iv_1)
confint(iv_2)
summary(iv_2)
cor(data)
setwd("/Users/avliu/Documents/Classes/BIOSTAT681/hw/hw_3")
data<-read.table("./asciiqob.txt")
data
colnames(data) = c('log_inc', 'edu', 'yob', 'qob', 'state')
as.factor(data$qob)
cor(data)
data$qob = as.factor(data$qob)
cor(data)
model_prep = lm(formula = edu ~ qob, data=data)
summary(model_prep)
model_prep_2 = lm(formula = edu ~ yob, data=data)
summary(model_prep_2)
(2+2+5+2+6+5+2)/7
((2+2+5+2+6+5+2)/7) - ((-2-1+2)/3)
y_1 = c(2,-3,2,5,2,6,-1,3,5,2)
y_0 = c(0,-2,-2,-1,0,2,-1,2,1,-2)
y_1 - y_0
sum(y_1 - y_0) / len(y_1)
sum(y_1 - y_0) / length(y_1)
a = c(1,0,1,1,1,1,0,0,1,1)
y_1 = c(2,-3,2,5,2,6,-1,3,5,2)
y_0 = c(0,-2,-2,-1,0,2,-1,2,1,-2)
a = c(1,0,1,1,1,1,0,0,1,1)
y_1 = c(2,-3,2,5,2,6,-1,3,5,2)
y_0 = c(0,-2,-2,-1,0,2,-1,2,1,-2)
# 1c
num_a1 = 7
sum((y_1 - y_0) * a) / num_a1
a_inv = 1 - a
sum((y_1 - y_0) * a_inv) / num_a1
a_inv = 1 - a
num_a1 = 3
sum((y_1 - y_0) * a_inv) / num_a1
mean(y_1*a)
mean(y_1*a)
mean(y_0*a)
mean(y_1*a_inv)
mean(y_0*a_inv)
22/(22+8+15)
8/(22+8+15)
15/(22+8+15)
# 3b
10.0384*71 - (13*71*0.42)
# 3b
pi_c = .32
pi_n = .26
pi_l = .42
y_10 = 24.25
y_01 = 13
y_11 = 10.0384
y_00 = 19.1364
( (y_11 * 71 * (pi_l+pi_c) ) - (y_01 * 71 * pi_l) ) / (71*pi_c)
( (y_00 * 71 * (pi_n+pi_c) ) - (y_10 * 71 * pi_n) ) / (71*pi_c)
lam_c1 = ( (y_11 * 71 * (pi_l+pi_c) ) - (y_01 * 71 * pi_l) ) / (71*pi_c)
lam_c0 = ( (y_00 * 71 * (pi_n+pi_c) ) - (y_10 * 71 * pi_n) ) / (71*pi_c)
lam_c1 - lam_c0
setwd("/Users/avliu/Documents/Research/youtube_polarizer/survey")
setwd("/Users/avliu/Documents/Research/youtube_audits/youtube_polarizer/survey")
setwd("/Users/avliu/Documents/Research/youtube_audits/youtube-polarizer/survey")
setwd("/Users/avliu/Documents/Research/youtube_audits/survey")
data<-read.table("./usa_00001.dat")
